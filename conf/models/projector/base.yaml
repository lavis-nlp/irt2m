# Configuration for projector training

# irt2m

# tested: bert base models (see transformers lib)
encoder: bert-base-cased

# available format keys:
#   prefix: short prefix based on the configuration (see train._build_prefix)
#   dataset: the (normalised) upstream IRT2.name property (e.g. irt2-cde-l)
#   date: start datetime formatted as %Y-%m-%d_%H-%M-%S
#   encoder: as defined
#   projector: as defined
out: data/models/{prefix}/{date}

# which kgc evaluations to run while training
evaluations:
  - kgc/train         # closed world kgc with original embeddings (run once before training)
  - kgc/transductive  # closed world kgc with projections (irt2.closed_triples)
  - kgc/inductive     # open world kgc with projections (irt2.open_kgc_val*)
  - irt2/inductive    # official irt2 evaluation

evaluations_kwargs:
  irt2:
    batch_size: 100

# there are three modes:
#    probe:
#      - do the "fast_dev_run" for sanity checks:
#        one batch per train and validation
#      - logger is disabled
#      - no data is written to disk
#    limited:
#      - run 10 batches per validation and train
#      - evaluate 10 triples in kgc evaluation
#      - evaluate 10 batches in irt2 evaluation
#      - logger is disabled
#      - no data is written to disk
#    full
#      - run all batches
#      - logging to wandb
#      - all data is written to disk

# mode: probe
# mode: limited
mode: full

# pytorch lightning

checkpoint:
  every_n_epochs: 1
  mode: max
  monitor: kgc/inductive/hits@10
  save_last: true
  save_top_k: 1

early_stopping_args:
  mode: max
  monitor: kgc/inductive/hits@10

scheduler: constant
scheduler_kwargs: {}

trainer:
  gpus: 1
  max_epochs: 200
  # limit_train_batches: 1
  # limit_val_batches: 1

wandb:
  project: irt2-projector
